{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Blockwise Ensemble Methods\n",
    "\n",
    "Dask-ML provides some [ensemble methods](https://ml.dask.org/modules/api.html#module-dask_ml.ensemble) that are tailored to `dask.array`'s and `dask.dataframe`'s blocked structure. The basic idea is to fit a copy of some sub-estimator to each block (or partition) of the dask Array or DataFrame. Becuase each block fits in memory, the sub-estimator only needs to handle in-memory data structures like a NumPy array or pandas DataFrame. It also will be relatively fast, since each block fits in memory and we won't need to move large amounts of data between workers on a cluster. We end up with an ensemble of models: one per block in the training dataset.\n",
    "\n",
    "At prediction time, we combine the results from all the models in the ensemble. For regression problems, this means averaging the predictions from each sub-estimator. For classification problems, each sub-estimator votes and the results are combined. See https://scikit-learn.org/stable/modules/ensemble.html#voting-classifier for details on how they can be combeind. See https://scikit-learn.org/stable/modules/ensemble.html for a general overview of why averaging ensemble methods can be useful.\n",
    "\n",
    "It's crucially important that the distribution of values in your dataset be relatively uniform across partitions. Otherwise the parameters learned on any given partition of the data will be poor for the dataset as a whole. This will be shown in detail later."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's randomly generate an example dataset. In practice, you would load the data from storage. We'll create a `dask.array` with 10 blocks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:46.276033Z",
     "iopub.status.busy": "2021-01-23T03:46:46.275265Z",
     "iopub.status.idle": "2021-01-23T03:46:49.847030Z",
     "shell.execute_reply": "2021-01-23T03:46:49.847341Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 160.00 MB </td> <td> 16.00 MB </td></tr>\n",
       "    <tr><th> Shape </th><td> (1000000, 20) </td> <td> (100000, 20) </td></tr>\n",
       "    <tr><th> Count </th><td> 10 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> float64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 25.412617,0.000000 25.412617,120.000000 0.000000,120.000000\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">1000000</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(1000000, 20), dtype=float64, chunksize=(100000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from distributed import Client\n",
    "import dask_ml.datasets\n",
    "import dask_ml.ensemble\n",
    "\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "\n",
    "X, y = dask_ml.datasets.make_classification(n_samples=1_000_000,\n",
    "                                            n_informative=10,\n",
    "                                            shift=2, scale=2,\n",
    "                                            chunks=100_000)\n",
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classification\n",
    "\n",
    "The `sub-estimator` should be an instantiated scikit-learn-API compatible estimator (anything that implements the `fit` / `predict` API, including pipelines). It only needs to handle in-memory datasets. We'll use `sklearn.linear_model.RidgeClassifier`.\n",
    "\n",
    "To get the output shapes right, we require that you provide the `classes` for classification problems, either when creating the estimator or in `.fit` if the sub-estimator also requires the classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:49.851089Z",
     "iopub.status.busy": "2021-01-23T03:46:49.850716Z",
     "iopub.status.idle": "2021-01-23T03:46:49.854649Z",
     "shell.execute_reply": "2021-01-23T03:46:49.854326Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BlockwiseVotingClassifier(classes=[0, 1],\n",
       "                          estimator=RidgeClassifier(random_state=0))"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sklearn.linear_model\n",
    "\n",
    "subestimator = sklearn.linear_model.RidgeClassifier(random_state=0)\n",
    "clf = dask_ml.ensemble.BlockwiseVotingClassifier(\n",
    "    subestimator,\n",
    "    classes=[0, 1]\n",
    ")\n",
    "clf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can train normally. This will *independently* fit a clone of `subestimator` on each partition of `X` and `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:49.870712Z",
     "iopub.status.busy": "2021-01-23T03:46:49.857357Z",
     "iopub.status.idle": "2021-01-23T03:46:52.366400Z",
     "shell.execute_reply": "2021-01-23T03:46:52.365707Z"
    }
   },
   "outputs": [],
   "source": [
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All of the fitted estimators are available at `.estimators_`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:52.373649Z",
     "iopub.status.busy": "2021-01-23T03:46:52.373217Z",
     "iopub.status.idle": "2021-01-23T03:46:52.375912Z",
     "shell.execute_reply": "2021-01-23T03:46:52.376413Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0)]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.estimators_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are different estimators! They've been trained on separate batches of data and have learned different parameters. We can plot the difference in the learned `coef_` of the first two models to visualize this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:52.378802Z",
     "iopub.status.busy": "2021-01-23T03:46:52.377983Z",
     "iopub.status.idle": "2021-01-23T03:46:52.569049Z",
     "shell.execute_reply": "2021-01-23T03:46:52.569390Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:52.584466Z",
     "iopub.status.busy": "2021-01-23T03:46:52.584047Z",
     "iopub.status.idle": "2021-01-23T03:46:52.680478Z",
     "shell.execute_reply": "2021-01-23T03:46:52.680169Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = clf.estimators_[0].coef_\n",
    "b = clf.estimators_[1].coef_\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.bar(np.arange(a.shape[1]), (a - b).ravel())\n",
    "ax.set(xticks=[], xlabel=\"Feature\", title=\"Difference in Learned Coefficients\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That said, the assumption backing this entire process is that the distribution of the data is relatively uniform across partitions. The parameters learned by the each member of the ensemble should be relatively similar, and so will give relatively similar predictions when applied to the same data.\n",
    "\n",
    "When you `predict`, the result will have the same chunking pattern as the input array you're predicting for (which need not match the partitioning of the training data)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:52.691640Z",
     "iopub.status.busy": "2021-01-23T03:46:52.690919Z",
     "iopub.status.idle": "2021-01-23T03:46:52.696362Z",
     "shell.execute_reply": "2021-01-23T03:46:52.696029Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 8.00 MB </td> <td> 800.00 kB </td></tr>\n",
       "    <tr><th> Shape </th><td> (1000000,) </td> <td> (100000,) </td></tr>\n",
       "    <tr><th> Count </th><td> 31 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> int64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"170\" height=\"75\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"12\" y1=\"0\" x2=\"12\" y2=\"25\" />\n",
       "  <line x1=\"24\" y1=\"0\" x2=\"24\" y2=\"25\" />\n",
       "  <line x1=\"36\" y1=\"0\" x2=\"36\" y2=\"25\" />\n",
       "  <line x1=\"48\" y1=\"0\" x2=\"48\" y2=\"25\" />\n",
       "  <line x1=\"60\" y1=\"0\" x2=\"60\" y2=\"25\" />\n",
       "  <line x1=\"72\" y1=\"0\" x2=\"72\" y2=\"25\" />\n",
       "  <line x1=\"84\" y1=\"0\" x2=\"84\" y2=\"25\" />\n",
       "  <line x1=\"96\" y1=\"0\" x2=\"96\" y2=\"25\" />\n",
       "  <line x1=\"108\" y1=\"0\" x2=\"108\" y2=\"25\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 120.000000,0.000000 120.000000,25.412617 0.000000,25.412617\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"45.412617\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >1000000</text>\n",
       "  <text x=\"140.000000\" y=\"12.706308\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(0,140.000000,12.706308)\">1</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<_vote_block, shape=(1000000,), dtype=int64, chunksize=(100000,), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds = clf.predict(X)\n",
    "preds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This generates a set of tasks that\n",
    "\n",
    "1. Calls `subestimator.predict(chunk)` for each subestimator (10 in our case)\n",
    "2. Concatenates those predictions together\n",
    "3. Somehow averages the predictions to a single overall prediction\n",
    "\n",
    "We used the default `voting=\"hard\"` strategy, which means we just choose the class that had the higest number of votes. If the first two sub-estimators picked class `0` and the other eight picked class `1` for the first row, the final prediction for that row will be class `1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:52.701469Z",
     "iopub.status.busy": "2021-01-23T03:46:52.701073Z",
     "iopub.status.idle": "2021-01-23T03:46:53.471290Z",
     "shell.execute_reply": "2021-01-23T03:46:53.470889Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 1, 1, 1, 1, 0, 1, 0])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:10].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With `voting=\"soft\"` we have access to `predict_proba`, as long as the subestimator has a `predict_proba` method. These subestimators should be well-calibrated for the predictions to be meaningful. See [probability calibration](https://scikit-learn.org/stable/modules/calibration.html#calibration) for more."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:53.483634Z",
     "iopub.status.busy": "2021-01-23T03:46:53.476244Z",
     "iopub.status.idle": "2021-01-23T03:46:55.918787Z",
     "shell.execute_reply": "2021-01-23T03:46:55.919611Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LogisticRegression(random_state=0)\n",
    "clf = dask_ml.ensemble.BlockwiseVotingClassifier(\n",
    "    subestimator,\n",
    "    classes=[0, 1],\n",
    "    voting=\"soft\"\n",
    ")\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:55.929044Z",
     "iopub.status.busy": "2021-01-23T03:46:55.928667Z",
     "iopub.status.idle": "2021-01-23T03:46:56.074622Z",
     "shell.execute_reply": "2021-01-23T03:46:56.074302Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.91101707, 0.08898293],\n",
       "       [0.9697942 , 0.0302058 ],\n",
       "       [0.95138998, 0.04861002],\n",
       "       [0.04777112, 0.95222888],\n",
       "       [0.06137532, 0.93862468]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "proba = clf.predict_proba(X)\n",
    "proba[:5].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The stages here are similar to the `voting=\"hard\"` case. Only now instead of taking the majority vote we average the probabilities predicted by each sub-estimator."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression\n",
    "\n",
    "Regression is quite similar. The primary difference is that there's no voting; predictions from estimators are always reduced by averaging."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:56.078609Z",
     "iopub.status.busy": "2021-01-23T03:46:56.078258Z",
     "iopub.status.idle": "2021-01-23T03:46:56.188019Z",
     "shell.execute_reply": "2021-01-23T03:46:56.188639Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 160.00 MB </td> <td> 16.00 MB </td></tr>\n",
       "    <tr><th> Shape </th><td> (1000000, 20) </td> <td> (100000, 20) </td></tr>\n",
       "    <tr><th> Count </th><td> 10 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> float64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 25.412617,0.000000 25.412617,120.000000 0.000000,120.000000\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">1000000</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(1000000, 20), dtype=float64, chunksize=(100000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y = dask_ml.datasets.make_regression(n_samples=1_000_000,\n",
    "                                        chunks=100_000,\n",
    "                                        n_features=20)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:56.191119Z",
     "iopub.status.busy": "2021-01-23T03:46:56.190346Z",
     "iopub.status.idle": "2021-01-23T03:46:57.828999Z",
     "shell.execute_reply": "2021-01-23T03:46:57.828272Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LinearRegression()\n",
    "clf = dask_ml.ensemble.BlockwiseVotingRegressor(\n",
    "    subestimator,\n",
    ")\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:57.834286Z",
     "iopub.status.busy": "2021-01-23T03:46:57.833912Z",
     "iopub.status.idle": "2021-01-23T03:46:57.956943Z",
     "shell.execute_reply": "2021-01-23T03:46:57.956618Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ -80.54959351, -195.918309  ,   97.94513017, -269.56343475,\n",
       "         17.47384056])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict(X)[:5].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As usual with Dask-ML, scoring is done in parallel (and distributed on a cluster if you're connected to one)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:57.961357Z",
     "iopub.status.busy": "2021-01-23T03:46:57.960985Z",
     "iopub.status.idle": "2021-01-23T03:46:59.593136Z",
     "shell.execute_reply": "2021-01-23T03:46:59.592791Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The dangers of non-uniformly distributed data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, it must be re-emphasized that your data should be uniformly distributed across partitoins prior to using these ensemble methods. If it's not, then you're better off just sampling rows from each partition and fitting a single classifer to it. By \"uniform\" we don't mean \"from a uniform probabillity distribution\". Just that there shouldn't be a clear per-partition pattern to how the data is distributed.\n",
    "\n",
    "Let's demonstrate that with an example. We'll generate a dataset with a clear trend across partitions. This might represent some non-stationary time-series, though it can occur in other contexts as well (e.g. on data partitioned by geography, age, etc.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:59.596198Z",
     "iopub.status.busy": "2021-01-23T03:46:59.595845Z",
     "iopub.status.idle": "2021-01-23T03:46:59.598931Z",
     "shell.execute_reply": "2021-01-23T03:46:59.599435Z"
    }
   },
   "outputs": [],
   "source": [
    "import dask.array as da\n",
    "import dask.delayed\n",
    "import sklearn.datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:59.601739Z",
     "iopub.status.busy": "2021-01-23T03:46:59.601370Z",
     "iopub.status.idle": "2021-01-23T03:46:59.604812Z",
     "shell.execute_reply": "2021-01-23T03:46:59.605441Z"
    }
   },
   "outputs": [],
   "source": [
    "def clone_and_shift(X, y, i):\n",
    "    X = X.copy()\n",
    "    X += i + np.random.random(X.shape)\n",
    "    y += 25 * (i + np.random.random(y.shape))\n",
    "    return X, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:59.607694Z",
     "iopub.status.busy": "2021-01-23T03:46:59.606859Z",
     "iopub.status.idle": "2021-01-23T03:46:59.615650Z",
     "shell.execute_reply": "2021-01-23T03:46:59.616275Z"
    }
   },
   "outputs": [],
   "source": [
    "# Make a base dataset that we'll clone and shift\n",
    "X, y = sklearn.datasets.make_regression(n_features=4, bias=2, random_state=0)\n",
    "\n",
    "# Clone and shift 10 times, gradually increasing X and y for each partition\n",
    "Xs, ys = zip(*[dask.delayed(clone_and_shift, nout=2)(X, y, i) for i in range(10)])\n",
    "Xs = [da.from_delayed(x, shape=X.shape, dtype=X.dtype) for x in Xs]\n",
    "ys = [da.from_delayed(y_, shape=y.shape, dtype=y.dtype) for y_ in ys]\n",
    "X2 = da.concatenate(Xs)\n",
    "y2 = da.concatenate(ys)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot a sample of points, coloring by which partition the data came from."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:59.618537Z",
     "iopub.status.busy": "2021-01-23T03:46:59.617720Z",
     "iopub.status.idle": "2021-01-23T03:46:59.820158Z",
     "shell.execute_reply": "2021-01-23T03:46:59.819802Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(X2[::5, 0], y2[::5], c=np.arange(0, len(X2), 5) // 100, cmap=\"Set1\",\n",
    "           label=\"Partition\")\n",
    "ax.set(xlabel=\"Feature 0\", ylabel=\"target\", title=\"Non-stationary data (by partition)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's fit two estimators:\n",
    "\n",
    "1. One `BlockwiseVotingRegressor` on the entire dataset (which fits a `LinearRegression` on each partition)\n",
    "2. One `LinearRegression` on a sample from the entire dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:59.829524Z",
     "iopub.status.busy": "2021-01-23T03:46:59.829120Z",
     "iopub.status.idle": "2021-01-23T03:46:59.906758Z",
     "shell.execute_reply": "2021-01-23T03:46:59.907049Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LinearRegression()\n",
    "clf = dask_ml.ensemble.BlockwiseVotingRegressor(\n",
    "    subestimator,\n",
    ")\n",
    "clf.fit(X2, y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:59.915914Z",
     "iopub.status.busy": "2021-01-23T03:46:59.913217Z",
     "iopub.status.idle": "2021-01-23T03:46:59.958672Z",
     "shell.execute_reply": "2021-01-23T03:46:59.958340Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_sampled, y_sampled = dask.compute(X2[::10], y2[::10])\n",
    "\n",
    "subestimator.fit(X_sampled, y_sampled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comparing the scores, we find that the sampled dataset performs much better, despite training on less data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:46:59.966181Z",
     "iopub.status.busy": "2021-01-23T03:46:59.964701Z",
     "iopub.status.idle": "2021-01-23T03:47:00.221939Z",
     "shell.execute_reply": "2021-01-23T03:47:00.222516Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-11.474558868166241"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X2, y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T03:47:00.233454Z",
     "iopub.status.busy": "2021-01-23T03:47:00.226086Z",
     "iopub.status.idle": "2021-01-23T03:47:00.303152Z",
     "shell.execute_reply": "2021-01-23T03:47:00.302834Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.10071344729666154"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subestimator.score(X2, y2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This shows that ensuring your needs to be relatively uniform across partitions. Even including the standard controls to normalize whatever underlying force is generating the non-stationary data (e.g. a time trend compontent or differencing timeseries data, dummy variables for geographic regions, etc) is not sufficient when your dataset is partioned by the non-uniform variable. You would still need to either shuffle your data prior to fitting, or just sample and fit the sub-estimator on the sub-sample that fits in memory."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
