{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dask Bags\n",
    "\n",
    "\n",
    "Dask Bag implements operations like `map`, `filter`, `groupby` and aggregations on collections of Python objects. It does this in parallel and in small memory using Python iterators. It is similar to a parallel version of itertools or a Pythonic version of the PySpark RDD.\n",
    "\n",
    "Dask Bags are often used to do simple preprocessing on log files, JSON records, or other user defined Python objects.\n",
    "\n",
    "Full API documentation is available here: http://docs.dask.org/en/latest/bag-api.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Start Dask Client for Dashboard\n",
    "\n",
    "Starting the Dask Client is optional.  It will provide a dashboard which \n",
    "is useful to gain insight on the computation.  \n",
    "\n",
    "The link to the dashboard will become visible when you create the client below.  We recommend having it open on one side of your screen while using your notebook on the other side.  This can take some effort to arrange your windows, but seeing them both at the same is very useful when learning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:02.834061Z",
     "iopub.status.busy": "2021-01-27T15:03:02.832719Z",
     "iopub.status.idle": "2021-01-27T15:03:06.330555Z",
     "shell.execute_reply": "2021-01-27T15:03:06.331011Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table style=\"border: 2px solid white;\">\n",
       "<tr>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Client</h3>\n",
       "<ul style=\"text-align: left; list-style: none; margin: 0; padding: 0;\">\n",
       "  <li><b>Scheduler: </b>tcp://127.0.0.1:35065</li>\n",
       "  <li><b>Dashboard: </b><a href='http://127.0.0.1:8787/status' target='_blank'>http://127.0.0.1:8787/status</a></li>\n",
       "</ul>\n",
       "</td>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Cluster</h3>\n",
       "<ul style=\"text-align: left; list-style:none; margin: 0; padding: 0;\">\n",
       "  <li><b>Workers: </b>4</li>\n",
       "  <li><b>Cores: </b>4</li>\n",
       "  <li><b>Memory: </b>7.29 GB</li>\n",
       "</ul>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Client: 'tcp://127.0.0.1:35065' processes=4 threads=4, memory=7.29 GB>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from dask.distributed import Client, progress\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "client"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create Random Data\n",
    "\n",
    "We create a random set of record data and store it to disk as many JSON files.  This will serve as our data for this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:06.337255Z",
     "iopub.status.busy": "2021-01-27T15:03:06.336648Z",
     "iopub.status.idle": "2021-01-27T15:03:08.675558Z",
     "shell.execute_reply": "2021-01-27T15:03:08.676597Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/home/runner/work/dask-examples/dask-examples/data/0.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/1.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/2.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/3.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/4.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/5.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/6.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/7.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/8.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/9.json']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import dask\n",
    "import json\n",
    "import os\n",
    "\n",
    "os.makedirs('data', exist_ok=True)              # Create data/ directory\n",
    "\n",
    "b = dask.datasets.make_people()                 # Make records of people\n",
    "b.map(json.dumps).to_textfiles('data/*.json')   # Encode as JSON, write to disk"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read JSON data\n",
    "\n",
    "Now that we have some JSON data in a file lets take a look at it with Dask Bag and Python JSON module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:08.682441Z",
     "iopub.status.busy": "2021-01-27T15:03:08.681698Z",
     "iopub.status.idle": "2021-01-27T15:03:08.872821Z",
     "shell.execute_reply": "2021-01-27T15:03:08.871987Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\"age\": 45, \"name\": [\"Andrew\", \"Burris\"], \"occupation\": \"Analytical Chemist\", \"telephone\": \"1-359-948-7231\", \"address\": {\"address\": \"931 Santa Marina Arcade\", \"city\": \"Castle Rock\"}, \"credit-card\": {\"number\": \"4476 0103 2588 4696\", \"expiration-date\": \"03/19\"}}\r\n",
      "{\"age\": 45, \"name\": [\"Holley\", \"Boyle\"], \"occupation\": \"Ship Broker\", \"telephone\": \"(140) 832-8654\", \"address\": {\"address\": \"43 Harlan Drung\", \"city\": \"Huber Heights\"}, \"credit-card\": {\"number\": \"4158 6233 7813 1610\", \"expiration-date\": \"06/17\"}}\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 2 data/0.json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:08.876997Z",
     "iopub.status.busy": "2021-01-27T15:03:08.875518Z",
     "iopub.status.idle": "2021-01-27T15:03:08.889982Z",
     "shell.execute_reply": "2021-01-27T15:03:08.891311Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dask.bag<loads, npartitions=10>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import dask.bag as db\n",
    "import json\n",
    "\n",
    "b = db.read_text('data/*.json').map(json.loads)\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:08.895414Z",
     "iopub.status.busy": "2021-01-27T15:03:08.893797Z",
     "iopub.status.idle": "2021-01-27T15:03:08.922277Z",
     "shell.execute_reply": "2021-01-27T15:03:08.923122Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 45,\n",
       "  'name': ['Andrew', 'Burris'],\n",
       "  'occupation': 'Analytical Chemist',\n",
       "  'telephone': '1-359-948-7231',\n",
       "  'address': {'address': '931 Santa Marina Arcade', 'city': 'Castle Rock'},\n",
       "  'credit-card': {'number': '4476 0103 2588 4696',\n",
       "   'expiration-date': '03/19'}},\n",
       " {'age': 45,\n",
       "  'name': ['Holley', 'Boyle'],\n",
       "  'occupation': 'Ship Broker',\n",
       "  'telephone': '(140) 832-8654',\n",
       "  'address': {'address': '43 Harlan Drung', 'city': 'Huber Heights'},\n",
       "  'credit-card': {'number': '4158 6233 7813 1610',\n",
       "   'expiration-date': '06/17'}})"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.take(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Map, Filter, Aggregate\n",
    "\n",
    "We can process this data by filtering out only certain records of interest, mapping functions over it to process our data, and aggregating those results to a total value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:08.930199Z",
     "iopub.status.busy": "2021-01-27T15:03:08.928530Z",
     "iopub.status.idle": "2021-01-27T15:03:08.954851Z",
     "shell.execute_reply": "2021-01-27T15:03:08.955674Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 45,\n",
       "  'name': ['Andrew', 'Burris'],\n",
       "  'occupation': 'Analytical Chemist',\n",
       "  'telephone': '1-359-948-7231',\n",
       "  'address': {'address': '931 Santa Marina Arcade', 'city': 'Castle Rock'},\n",
       "  'credit-card': {'number': '4476 0103 2588 4696',\n",
       "   'expiration-date': '03/19'}},\n",
       " {'age': 45,\n",
       "  'name': ['Holley', 'Boyle'],\n",
       "  'occupation': 'Ship Broker',\n",
       "  'telephone': '(140) 832-8654',\n",
       "  'address': {'address': '43 Harlan Drung', 'city': 'Huber Heights'},\n",
       "  'credit-card': {'number': '4158 6233 7813 1610',\n",
       "   'expiration-date': '06/17'}})"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.filter(lambda record: record['age'] > 30).take(2)  # Select only people over 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:08.961912Z",
     "iopub.status.busy": "2021-01-27T15:03:08.961163Z",
     "iopub.status.idle": "2021-01-27T15:03:08.983898Z",
     "shell.execute_reply": "2021-01-27T15:03:08.983411Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Analytical Chemist', 'Ship Broker')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.map(lambda record: record['occupation']).take(2)  # Select the occupation field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:08.988230Z",
     "iopub.status.busy": "2021-01-27T15:03:08.985999Z",
     "iopub.status.idle": "2021-01-27T15:03:09.137870Z",
     "shell.execute_reply": "2021-01-27T15:03:09.136998Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.count().compute()  # Count total number of records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chain computations\n",
    "\n",
    "It is common to do many of these steps in one pipeline, only calling `compute` or `take` at the end."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:09.144444Z",
     "iopub.status.busy": "2021-01-27T15:03:09.143857Z",
     "iopub.status.idle": "2021-01-27T15:03:09.146317Z",
     "shell.execute_reply": "2021-01-27T15:03:09.147291Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dask.bag<topk-aggregate, npartitions=1>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = (b.filter(lambda record: record['age'] > 30)\n",
    "           .map(lambda record: record['occupation'])\n",
    "           .frequencies(sort=True)\n",
    "           .topk(10, key=1))\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As with all lazy Dask collections, we need to call `compute` to actually evaluate our result.  The `take` method used in earlier examples is also like `compute` and will also trigger computation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:09.151980Z",
     "iopub.status.busy": "2021-01-27T15:03:09.149816Z",
     "iopub.status.idle": "2021-01-27T15:03:09.311182Z",
     "shell.execute_reply": "2021-01-27T15:03:09.310590Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Masseur', 15),\n",
       " ('Quality Inspector', 14),\n",
       " ('Postmaster', 14),\n",
       " ('Cartoonist', 13),\n",
       " ('Tennis Coach', 13),\n",
       " ('Merchandiser', 13),\n",
       " ('Radio Producer', 13),\n",
       " ('Pest Controller', 13),\n",
       " ('Resin Caster', 13),\n",
       " ('Property Dealer', 13)]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transform and Store\n",
    "\n",
    "Sometimes we want to compute aggregations as above, but sometimes we want to store results to disk for future analyses.  For that we can use methods like `to_textfiles` and `json.dumps`, or we can convert to Dask Dataframes and use their storage systems, which we'll see more of in the next section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:09.314351Z",
     "iopub.status.busy": "2021-01-27T15:03:09.313714Z",
     "iopub.status.idle": "2021-01-27T15:03:09.520938Z",
     "shell.execute_reply": "2021-01-27T15:03:09.520362Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/home/runner/work/dask-examples/dask-examples/data/processed.0.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.1.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.2.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.3.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.4.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.5.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.6.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.7.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.8.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.9.json']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(b.filter(lambda record: record['age'] > 30)  # Select records of interest\n",
    "  .map(json.dumps)                            # Convert Python objects to text\n",
    "  .to_textfiles('data/processed.*.json'))     # Write to local disk"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert to Dask Dataframes\n",
    "\n",
    "Dask Bags are good for reading in initial data, doing a bit of pre-processing, and then handing off to some other more efficient form like Dask Dataframes.  Dask Dataframes use Pandas internally, and so can be much faster on numeric data and also have more complex algorithms.  \n",
    "\n",
    "However, Dask Dataframes also expect data that is organized as flat columns.  It does not support nested JSON data very well (Bag is better for this).\n",
    "\n",
    "Here we make a function to flatten down our nested data structure, map that across our records, and then convert that to a Dask Dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:09.526119Z",
     "iopub.status.busy": "2021-01-27T15:03:09.524713Z",
     "iopub.status.idle": "2021-01-27T15:03:09.548347Z",
     "shell.execute_reply": "2021-01-27T15:03:09.547837Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 45,\n",
       "  'name': ['Andrew', 'Burris'],\n",
       "  'occupation': 'Analytical Chemist',\n",
       "  'telephone': '1-359-948-7231',\n",
       "  'address': {'address': '931 Santa Marina Arcade', 'city': 'Castle Rock'},\n",
       "  'credit-card': {'number': '4476 0103 2588 4696',\n",
       "   'expiration-date': '03/19'}},)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.take(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:09.551154Z",
     "iopub.status.busy": "2021-01-27T15:03:09.550596Z",
     "iopub.status.idle": "2021-01-27T15:03:09.583552Z",
     "shell.execute_reply": "2021-01-27T15:03:09.583020Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 45,\n",
       "  'occupation': 'Analytical Chemist',\n",
       "  'telephone': '1-359-948-7231',\n",
       "  'credit-card-number': '4476 0103 2588 4696',\n",
       "  'credit-card-expiration': '03/19',\n",
       "  'name': 'Andrew Burris',\n",
       "  'street-address': '931 Santa Marina Arcade',\n",
       "  'city': 'Castle Rock'},)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def flatten(record):\n",
    "    return {\n",
    "        'age': record['age'],\n",
    "        'occupation': record['occupation'],\n",
    "        'telephone': record['telephone'],\n",
    "        'credit-card-number': record['credit-card']['number'],\n",
    "        'credit-card-expiration': record['credit-card']['expiration-date'],\n",
    "        'name': ' '.join(record['name']),\n",
    "        'street-address': record['address']['address'],\n",
    "        'city': record['address']['city']   \n",
    "    }\n",
    "\n",
    "b.map(flatten).take(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:09.590740Z",
     "iopub.status.busy": "2021-01-27T15:03:09.590131Z",
     "iopub.status.idle": "2021-01-27T15:03:10.282548Z",
     "shell.execute_reply": "2021-01-27T15:03:10.281979Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>occupation</th>\n",
       "      <th>telephone</th>\n",
       "      <th>credit-card-number</th>\n",
       "      <th>credit-card-expiration</th>\n",
       "      <th>name</th>\n",
       "      <th>street-address</th>\n",
       "      <th>city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>45</td>\n",
       "      <td>Analytical Chemist</td>\n",
       "      <td>1-359-948-7231</td>\n",
       "      <td>4476 0103 2588 4696</td>\n",
       "      <td>03/19</td>\n",
       "      <td>Andrew Burris</td>\n",
       "      <td>931 Santa Marina Arcade</td>\n",
       "      <td>Castle Rock</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45</td>\n",
       "      <td>Ship Broker</td>\n",
       "      <td>(140) 832-8654</td>\n",
       "      <td>4158 6233 7813 1610</td>\n",
       "      <td>06/17</td>\n",
       "      <td>Holley Boyle</td>\n",
       "      <td>43 Harlan Drung</td>\n",
       "      <td>Huber Heights</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26</td>\n",
       "      <td>History Teacher</td>\n",
       "      <td>517-216-0871</td>\n",
       "      <td>4432 1284 7454 9192</td>\n",
       "      <td>07/25</td>\n",
       "      <td>Donald Hancock</td>\n",
       "      <td>1035 Treasury Lane</td>\n",
       "      <td>Lynwood</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62</td>\n",
       "      <td>Lawyer</td>\n",
       "      <td>839-194-1128</td>\n",
       "      <td>2474 5240 9174 2926</td>\n",
       "      <td>01/19</td>\n",
       "      <td>Madaline Singleton</td>\n",
       "      <td>1189 De Montfort Heights</td>\n",
       "      <td>Fountain Valley</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>45</td>\n",
       "      <td>Inventor</td>\n",
       "      <td>+1-(388)-195-6224</td>\n",
       "      <td>3710 353206 60373</td>\n",
       "      <td>07/20</td>\n",
       "      <td>Shala Perkins</td>\n",
       "      <td>318 Osage Esplanade</td>\n",
       "      <td>Del Rio</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age          occupation          telephone   credit-card-number  \\\n",
       "0   45  Analytical Chemist     1-359-948-7231  4476 0103 2588 4696   \n",
       "1   45         Ship Broker     (140) 832-8654  4158 6233 7813 1610   \n",
       "2   26     History Teacher       517-216-0871  4432 1284 7454 9192   \n",
       "3   62              Lawyer       839-194-1128  2474 5240 9174 2926   \n",
       "4   45            Inventor  +1-(388)-195-6224    3710 353206 60373   \n",
       "\n",
       "  credit-card-expiration                name            street-address  \\\n",
       "0                  03/19       Andrew Burris   931 Santa Marina Arcade   \n",
       "1                  06/17        Holley Boyle           43 Harlan Drung   \n",
       "2                  07/25      Donald Hancock        1035 Treasury Lane   \n",
       "3                  01/19  Madaline Singleton  1189 De Montfort Heights   \n",
       "4                  07/20       Shala Perkins       318 Osage Esplanade   \n",
       "\n",
       "              city  \n",
       "0      Castle Rock  \n",
       "1    Huber Heights  \n",
       "2          Lynwood  \n",
       "3  Fountain Valley  \n",
       "4          Del Rio  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = b.map(flatten).to_dataframe()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now perform the same computation as before, but now using Pandas and Dask dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T15:03:10.296474Z",
     "iopub.status.busy": "2021-01-27T15:03:10.295895Z",
     "iopub.status.idle": "2021-01-27T15:03:11.313218Z",
     "shell.execute_reply": "2021-01-27T15:03:11.314260Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Masseur              15\n",
       "Quality Inspector    14\n",
       "Postmaster           14\n",
       "Tacker               13\n",
       "Merchandiser         13\n",
       "Pest Controller      13\n",
       "Property Dealer      13\n",
       "Radio Producer       13\n",
       "Cartoonist           13\n",
       "Sports Coach         13\n",
       "Name: occupation, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.age > 30].occupation.value_counts().nlargest(10).compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Learn More\n",
    "\n",
    "You may be interested in the following links:\n",
    "\n",
    "-  [Dask Bag Documentation](https://docs.dask.org/en/latest/bag.html)\n",
    "-  [API Documentation](http://docs.dask.org/en/latest/bag-api.html)\n",
    "-  [dask tutorial](https://github.com/dask/dask-tutorial), notebook 02, for a more in-depth introduction."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
