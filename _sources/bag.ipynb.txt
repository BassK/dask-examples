{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dask Bags\n",
    "\n",
    "\n",
    "Dask Bag implements operations like `map`, `filter`, `groupby` and aggregations on collections of Python objects. It does this in parallel and in small memory using Python iterators. It is similar to a parallel version of itertools or a Pythonic version of the PySpark RDD.\n",
    "\n",
    "Dask Bags are often used to do simple preprocessing on log files, JSON records, or other user defined Python objects.\n",
    "\n",
    "Full API documentation is available here: http://docs.dask.org/en/latest/bag-api.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Start Dask Client for Dashboard\n",
    "\n",
    "Starting the Dask Client is optional.  It will provide a dashboard which \n",
    "is useful to gain insight on the computation.  \n",
    "\n",
    "The link to the dashboard will become visible when you create the client below.  We recommend having it open on one side of your screen while using your notebook on the other side.  This can take some effort to arrange your windows, but seeing them both at the same is very useful when learning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:08.893382Z",
     "iopub.status.busy": "2021-01-29T22:04:08.892809Z",
     "iopub.status.idle": "2021-01-29T22:04:11.894686Z",
     "shell.execute_reply": "2021-01-29T22:04:11.895431Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages/distributed/node.py:151: UserWarning: Port 8787 is already in use.\n",
      "Perhaps you already have a cluster running?\n",
      "Hosting the HTTP server on port 41855 instead\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table style=\"border: 2px solid white;\">\n",
       "<tr>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Client</h3>\n",
       "<ul style=\"text-align: left; list-style: none; margin: 0; padding: 0;\">\n",
       "  <li><b>Scheduler: </b>tcp://127.0.0.1:38471</li>\n",
       "  <li><b>Dashboard: </b><a href='http://127.0.0.1:41855/status' target='_blank'>http://127.0.0.1:41855/status</a></li>\n",
       "</ul>\n",
       "</td>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Cluster</h3>\n",
       "<ul style=\"text-align: left; list-style:none; margin: 0; padding: 0;\">\n",
       "  <li><b>Workers: </b>4</li>\n",
       "  <li><b>Cores: </b>4</li>\n",
       "  <li><b>Memory: </b>7.29 GB</li>\n",
       "</ul>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Client: 'tcp://127.0.0.1:38471' processes=4 threads=4, memory=7.29 GB>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from dask.distributed import Client, progress\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "client"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create Random Data\n",
    "\n",
    "We create a random set of record data and store it to disk as many JSON files.  This will serve as our data for this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:11.900285Z",
     "iopub.status.busy": "2021-01-29T22:04:11.897733Z",
     "iopub.status.idle": "2021-01-29T22:04:13.549209Z",
     "shell.execute_reply": "2021-01-29T22:04:13.548225Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/home/runner/work/dask-examples/dask-examples/data/0.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/1.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/2.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/3.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/4.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/5.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/6.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/7.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/8.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/9.json']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import dask\n",
    "import json\n",
    "import os\n",
    "\n",
    "os.makedirs('data', exist_ok=True)              # Create data/ directory\n",
    "\n",
    "b = dask.datasets.make_people()                 # Make records of people\n",
    "b.map(json.dumps).to_textfiles('data/*.json')   # Encode as JSON, write to disk"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read JSON data\n",
    "\n",
    "Now that we have some JSON data in a file lets take a look at it with Dask Bag and Python JSON module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:13.553270Z",
     "iopub.status.busy": "2021-01-29T22:04:13.552683Z",
     "iopub.status.idle": "2021-01-29T22:04:13.714415Z",
     "shell.execute_reply": "2021-01-29T22:04:13.713427Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\"age\": 17, \"name\": [\"Sang\", \"Harrington\"], \"occupation\": \"Acoustic Engineer\", \"telephone\": \"555.305.0242\", \"address\": {\"address\": \"60 Ocean Trail\", \"city\": \"La Mesa\"}, \"credit-card\": {\"number\": \"5564 8609 9238 8995\", \"expiration-date\": \"06/21\"}}\r\n",
      "{\"age\": 61, \"name\": [\"Rolando\", \"Calhoun\"], \"occupation\": \"Aerial Erector\", \"telephone\": \"1-073-052-3379\", \"address\": {\"address\": \"6 Zoe Garden\", \"city\": \"Waukegan\"}, \"credit-card\": {\"number\": \"5406 0743 6038 6720\", \"expiration-date\": \"01/16\"}}\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 2 data/0.json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:13.718977Z",
     "iopub.status.busy": "2021-01-29T22:04:13.718411Z",
     "iopub.status.idle": "2021-01-29T22:04:13.726330Z",
     "shell.execute_reply": "2021-01-29T22:04:13.726983Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dask.bag<loads, npartitions=10>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import dask.bag as db\n",
    "import json\n",
    "\n",
    "b = db.read_text('data/*.json').map(json.loads)\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:13.730103Z",
     "iopub.status.busy": "2021-01-29T22:04:13.729159Z",
     "iopub.status.idle": "2021-01-29T22:04:13.755814Z",
     "shell.execute_reply": "2021-01-29T22:04:13.756501Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 17,\n",
       "  'name': ['Sang', 'Harrington'],\n",
       "  'occupation': 'Acoustic Engineer',\n",
       "  'telephone': '555.305.0242',\n",
       "  'address': {'address': '60 Ocean Trail', 'city': 'La Mesa'},\n",
       "  'credit-card': {'number': '5564 8609 9238 8995',\n",
       "   'expiration-date': '06/21'}},\n",
       " {'age': 61,\n",
       "  'name': ['Rolando', 'Calhoun'],\n",
       "  'occupation': 'Aerial Erector',\n",
       "  'telephone': '1-073-052-3379',\n",
       "  'address': {'address': '6 Zoe Garden', 'city': 'Waukegan'},\n",
       "  'credit-card': {'number': '5406 0743 6038 6720',\n",
       "   'expiration-date': '01/16'}})"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.take(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Map, Filter, Aggregate\n",
    "\n",
    "We can process this data by filtering out only certain records of interest, mapping functions over it to process our data, and aggregating those results to a total value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:13.759678Z",
     "iopub.status.busy": "2021-01-29T22:04:13.758615Z",
     "iopub.status.idle": "2021-01-29T22:04:13.782100Z",
     "shell.execute_reply": "2021-01-29T22:04:13.782901Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 61,\n",
       "  'name': ['Rolando', 'Calhoun'],\n",
       "  'occupation': 'Aerial Erector',\n",
       "  'telephone': '1-073-052-3379',\n",
       "  'address': {'address': '6 Zoe Garden', 'city': 'Waukegan'},\n",
       "  'credit-card': {'number': '5406 0743 6038 6720',\n",
       "   'expiration-date': '01/16'}},\n",
       " {'age': 51,\n",
       "  'name': ['Curt', 'Garza'],\n",
       "  'occupation': 'Ceiling Fixer',\n",
       "  'telephone': '(994) 213-9475',\n",
       "  'address': {'address': '1190 Mark Twain Plantation', 'city': 'Bettendorf'},\n",
       "  'credit-card': {'number': '3794 811438 69084', 'expiration-date': '05/17'}})"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.filter(lambda record: record['age'] > 30).take(2)  # Select only people over 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:13.787011Z",
     "iopub.status.busy": "2021-01-29T22:04:13.785080Z",
     "iopub.status.idle": "2021-01-29T22:04:13.814020Z",
     "shell.execute_reply": "2021-01-29T22:04:13.813569Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Acoustic Engineer', 'Aerial Erector')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.map(lambda record: record['occupation']).take(2)  # Select the occupation field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:13.822419Z",
     "iopub.status.busy": "2021-01-29T22:04:13.821952Z",
     "iopub.status.idle": "2021-01-29T22:04:13.932271Z",
     "shell.execute_reply": "2021-01-29T22:04:13.932941Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.count().compute()  # Count total number of records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chain computations\n",
    "\n",
    "It is common to do many of these steps in one pipeline, only calling `compute` or `take` at the end."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:13.938735Z",
     "iopub.status.busy": "2021-01-29T22:04:13.938242Z",
     "iopub.status.idle": "2021-01-29T22:04:13.941747Z",
     "shell.execute_reply": "2021-01-29T22:04:13.942141Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dask.bag<topk-aggregate, npartitions=1>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = (b.filter(lambda record: record['age'] > 30)\n",
    "           .map(lambda record: record['occupation'])\n",
    "           .frequencies(sort=True)\n",
    "           .topk(10, key=1))\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As with all lazy Dask collections, we need to call `compute` to actually evaluate our result.  The `take` method used in earlier examples is also like `compute` and will also trigger computation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:13.944318Z",
     "iopub.status.busy": "2021-01-29T22:04:13.943842Z",
     "iopub.status.idle": "2021-01-29T22:04:14.059078Z",
     "shell.execute_reply": "2021-01-29T22:04:14.058609Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Miner', 17),\n",
       " ('Gynaecologist', 15),\n",
       " ('Store Detective', 14),\n",
       " ('Barmaid', 14),\n",
       " ('Health Visitor', 14),\n",
       " ('Trinity House Pilot', 14),\n",
       " ('Tug Skipper', 13),\n",
       " ('Machine Minder', 13),\n",
       " ('Journalist', 12),\n",
       " ('Photographer', 12)]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transform and Store\n",
    "\n",
    "Sometimes we want to compute aggregations as above, but sometimes we want to store results to disk for future analyses.  For that we can use methods like `to_textfiles` and `json.dumps`, or we can convert to Dask Dataframes and use their storage systems, which we'll see more of in the next section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:14.061251Z",
     "iopub.status.busy": "2021-01-29T22:04:14.060782Z",
     "iopub.status.idle": "2021-01-29T22:04:14.204994Z",
     "shell.execute_reply": "2021-01-29T22:04:14.205377Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/home/runner/work/dask-examples/dask-examples/data/processed.0.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.1.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.2.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.3.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.4.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.5.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.6.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.7.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.8.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.9.json']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(b.filter(lambda record: record['age'] > 30)  # Select records of interest\n",
    "  .map(json.dumps)                            # Convert Python objects to text\n",
    "  .to_textfiles('data/processed.*.json'))     # Write to local disk"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert to Dask Dataframes\n",
    "\n",
    "Dask Bags are good for reading in initial data, doing a bit of pre-processing, and then handing off to some other more efficient form like Dask Dataframes.  Dask Dataframes use Pandas internally, and so can be much faster on numeric data and also have more complex algorithms.  \n",
    "\n",
    "However, Dask Dataframes also expect data that is organized as flat columns.  It does not support nested JSON data very well (Bag is better for this).\n",
    "\n",
    "Here we make a function to flatten down our nested data structure, map that across our records, and then convert that to a Dask Dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:14.208883Z",
     "iopub.status.busy": "2021-01-29T22:04:14.208407Z",
     "iopub.status.idle": "2021-01-29T22:04:14.228518Z",
     "shell.execute_reply": "2021-01-29T22:04:14.228084Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 17,\n",
       "  'name': ['Sang', 'Harrington'],\n",
       "  'occupation': 'Acoustic Engineer',\n",
       "  'telephone': '555.305.0242',\n",
       "  'address': {'address': '60 Ocean Trail', 'city': 'La Mesa'},\n",
       "  'credit-card': {'number': '5564 8609 9238 8995',\n",
       "   'expiration-date': '06/21'}},)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.take(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:14.234098Z",
     "iopub.status.busy": "2021-01-29T22:04:14.233343Z",
     "iopub.status.idle": "2021-01-29T22:04:14.256595Z",
     "shell.execute_reply": "2021-01-29T22:04:14.256051Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 17,\n",
       "  'occupation': 'Acoustic Engineer',\n",
       "  'telephone': '555.305.0242',\n",
       "  'credit-card-number': '5564 8609 9238 8995',\n",
       "  'credit-card-expiration': '06/21',\n",
       "  'name': 'Sang Harrington',\n",
       "  'street-address': '60 Ocean Trail',\n",
       "  'city': 'La Mesa'},)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def flatten(record):\n",
    "    return {\n",
    "        'age': record['age'],\n",
    "        'occupation': record['occupation'],\n",
    "        'telephone': record['telephone'],\n",
    "        'credit-card-number': record['credit-card']['number'],\n",
    "        'credit-card-expiration': record['credit-card']['expiration-date'],\n",
    "        'name': ' '.join(record['name']),\n",
    "        'street-address': record['address']['address'],\n",
    "        'city': record['address']['city']   \n",
    "    }\n",
    "\n",
    "b.map(flatten).take(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:14.258772Z",
     "iopub.status.busy": "2021-01-29T22:04:14.258303Z",
     "iopub.status.idle": "2021-01-29T22:04:14.835086Z",
     "shell.execute_reply": "2021-01-29T22:04:14.835573Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>occupation</th>\n",
       "      <th>telephone</th>\n",
       "      <th>credit-card-number</th>\n",
       "      <th>credit-card-expiration</th>\n",
       "      <th>name</th>\n",
       "      <th>street-address</th>\n",
       "      <th>city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17</td>\n",
       "      <td>Acoustic Engineer</td>\n",
       "      <td>555.305.0242</td>\n",
       "      <td>5564 8609 9238 8995</td>\n",
       "      <td>06/21</td>\n",
       "      <td>Sang Harrington</td>\n",
       "      <td>60 Ocean Trail</td>\n",
       "      <td>La Mesa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>61</td>\n",
       "      <td>Aerial Erector</td>\n",
       "      <td>1-073-052-3379</td>\n",
       "      <td>5406 0743 6038 6720</td>\n",
       "      <td>01/16</td>\n",
       "      <td>Rolando Calhoun</td>\n",
       "      <td>6 Zoe Garden</td>\n",
       "      <td>Waukegan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16</td>\n",
       "      <td>Medical Practitioner</td>\n",
       "      <td>(767) 023-7986</td>\n",
       "      <td>5231 1287 4952 5357</td>\n",
       "      <td>01/20</td>\n",
       "      <td>Hugh Mcclure</td>\n",
       "      <td>417 Ward Viaduct</td>\n",
       "      <td>Plymouth</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>51</td>\n",
       "      <td>Ceiling Fixer</td>\n",
       "      <td>(994) 213-9475</td>\n",
       "      <td>3794 811438 69084</td>\n",
       "      <td>05/17</td>\n",
       "      <td>Curt Garza</td>\n",
       "      <td>1190 Mark Twain Plantation</td>\n",
       "      <td>Bettendorf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>49</td>\n",
       "      <td>Aircraft Designer</td>\n",
       "      <td>+1-(225)-721-7908</td>\n",
       "      <td>4095 2197 6352 6674</td>\n",
       "      <td>06/22</td>\n",
       "      <td>Ying Robles</td>\n",
       "      <td>485 Shaw Alley</td>\n",
       "      <td>Montgomery</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age            occupation          telephone   credit-card-number  \\\n",
       "0   17     Acoustic Engineer       555.305.0242  5564 8609 9238 8995   \n",
       "1   61        Aerial Erector     1-073-052-3379  5406 0743 6038 6720   \n",
       "2   16  Medical Practitioner     (767) 023-7986  5231 1287 4952 5357   \n",
       "3   51         Ceiling Fixer     (994) 213-9475    3794 811438 69084   \n",
       "4   49     Aircraft Designer  +1-(225)-721-7908  4095 2197 6352 6674   \n",
       "\n",
       "  credit-card-expiration             name              street-address  \\\n",
       "0                  06/21  Sang Harrington              60 Ocean Trail   \n",
       "1                  01/16  Rolando Calhoun                6 Zoe Garden   \n",
       "2                  01/20     Hugh Mcclure            417 Ward Viaduct   \n",
       "3                  05/17       Curt Garza  1190 Mark Twain Plantation   \n",
       "4                  06/22      Ying Robles              485 Shaw Alley   \n",
       "\n",
       "         city  \n",
       "0     La Mesa  \n",
       "1    Waukegan  \n",
       "2    Plymouth  \n",
       "3  Bettendorf  \n",
       "4  Montgomery  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = b.map(flatten).to_dataframe()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now perform the same computation as before, but now using Pandas and Dask dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-29T22:04:14.838659Z",
     "iopub.status.busy": "2021-01-29T22:04:14.837607Z",
     "iopub.status.idle": "2021-01-29T22:04:15.703783Z",
     "shell.execute_reply": "2021-01-29T22:04:15.704213Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Miner                            17\n",
       "Gynaecologist                    15\n",
       "Health Visitor                   14\n",
       "Store Detective                  14\n",
       "Trinity House Pilot              14\n",
       "Barmaid                          14\n",
       "Machine Minder                   13\n",
       "Tug Skipper                      13\n",
       "Steel Worker                     12\n",
       "Aircraft Maintenance Engineer    12\n",
       "Name: occupation, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.age > 30].occupation.value_counts().nlargest(10).compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Learn More\n",
    "\n",
    "You may be interested in the following links:\n",
    "\n",
    "-  [Dask Bag Documentation](https://docs.dask.org/en/latest/bag.html)\n",
    "-  [API Documentation](http://docs.dask.org/en/latest/bag-api.html)\n",
    "-  [dask tutorial](https://github.com/dask/dask-tutorial), notebook 02, for a more in-depth introduction."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
